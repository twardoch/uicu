name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  id-token: write

jobs:
  test:
    name: Run Tests
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install ICU dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libicu-dev pkg-config

      - name: Install ICU dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install icu4c pkg-config
          echo "PKG_CONFIG_PATH=/usr/local/opt/icu4c/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install ICU dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install icu:x64-windows
          echo "ICU_ROOT=C:/vcpkg/installed/x64-windows" >> $GITHUB_ENV

      - name: Install test dependencies
        run: |
          uv pip install --system --upgrade pip
          uv pip install --system ".[test]"

      - name: Run tests
        run: uv run pytest -n auto --maxfail=1 --disable-warnings tests/

  build-binaries:
    name: Build Binaries
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install ICU dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libicu-dev pkg-config

      - name: Install ICU dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install icu4c pkg-config
          echo "PKG_CONFIG_PATH=/usr/local/opt/icu4c/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install ICU dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install icu:x64-windows
          echo "ICU_ROOT=C:/vcpkg/installed/x64-windows" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          uv pip install --system --upgrade pip
          uv pip install --system ".[dev,test,all]"
          uv pip install --system pyinstaller

      - name: Build binary
        run: |
          chmod +x scripts/build-binary.sh
          ./scripts/build-binary.sh
        shell: bash

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}
          path: build/binary/uicu-binary-*.tar.gz

  release:
    name: Release to PyPI
    needs: [test, build-binaries]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/uicu
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install ICU dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libicu-dev pkg-config

      - name: Install build tools
        run: uv pip install --system build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Verify distribution files
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || (echo "Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "Source distribution missing" && exit 1)

      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cp dist/* release-assets/
          find binaries/ -name "*.tar.gz" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
          body: |
            ## Release Notes
            
            This release includes:
            - Python wheels for multiple platforms
            - Source distribution
            - Compiled binaries for Linux, macOS, and Windows
            
            ## Installation
            
            ### Python Package
            ```bash
            pip install uicu
            ```
            
            ### Binary Installation
            Download the appropriate binary for your platform from the assets below.
            
            ## What's Changed
            See the full changelog and commit history below.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 